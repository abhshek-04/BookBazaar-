// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}



model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      UserRole   @default(USER)
  image     String?    // optional
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  reviews   Review[]
  orders    Order[]
  books   Book[]   @relation("UserBooks")
}



model Book {
  id          String    @id @default(uuid())
  title       String
  author      String
  description String
  genre       String?
  price       Float
  coverImage  String   // by url 
  stock       Int   
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  reviews     Review[]     // One book can have many reviews
  orders      OrderItem[]  // Many orders can include this book
  createdBy   User     @relation("UserBooks", fields: [createdById], references: [id])
  createdById String    
     

}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  
  // Relations
  user   User @relation(fields: [userId], references: [id])
  userId String

  book   Book @relation(fields: [bookId], references: [id])
  bookId String
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  price     Float

  // Relations
  order   Order @relation(fields: [orderId], references: [id])
  orderId String

  book    Book @relation(fields: [bookId], references: [id])
  bookId String
}


model Order {
  id         String       @id @default(uuid())
  total      Float
  status     String       @default("PENDING")
  createdAt  DateTime     @default(now())

  // Relations
  user    User        @relation(fields: [userId], references: [id])
  userId  String

  items   OrderItem[]
}


enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}
